const sinon = require('sinon')
const chai = require('chai')

const expect = require('chai').expect
const assert = require('chai').assert

const sha256 = require('sha256');
const BigInteger = require('jsbn').BigInteger;
const BlindSignature = require('blind-signatures');
const NodeRSA = require('node-rsa');

const tokengenerator = require('./../tokengenerator');

const config = require('./../config.json');


describe('Blinding a message', function () {
  it('works', function () {
    var token = tokengenerator.generateToken();
    var pwd = 'foobar42';
    var e = new BigInteger('65537', 10);
    var n = new BigInteger('8e6c7c955ab5f721400290ec097a7304f79c1469a61c7110eb51d163ccd87d795370898540a933d4fe96b6ea57a03c09f5f1088320a46ecc79d09666bca5843aceffecfea3c78ee2f90a7bc3a7ba32c96749fc8bea5c1155356b00addaff0a310732dbeaf765ef94b45f6de248c9f6de5083757b4e5de9be651963e9fe3b3125751ed36feebd51a7303a650acf79b18eecce5db226e7371e5a80e6f4ae70ba64ce8632c58aa297ddeaf0804dab1a0bf08ab714fa753167cd98144756f3a6a68fc53e7e80a848ed8d722ea5d34c7c1d80caca93ed88188553bd812907ef15c4084bc7a85fe363c5a854d30ec27e43d26ef6ecceaa7b02c5e81a7a60d222d7cd0d', 16);
    var blindedToken = tokengenerator.blindToken(token, pwd, n.toString(16), e.toString(16));
  })
})

describe('Unblinding a token', function() {
  it('works with real data', function() {
    var blindedSignedToken =  '6f6091b63f12fff76bc246fc504d057c9cb097597d24b58a82400bc9815327ff7286f129f8260690cfb51b5a10cb962b49eb01c5342a8e5d3c878152fbfbc34c3223c7a4e95db9b6c93895483f1d8833466bb5c002e8dd37a53241db168409b79a9e91bd0dc0a0e1f437a250cc40c3d6172ad574fdbb10f845d2ec606b5c380ae30d024a7d641f361543d2551320a177a6aa0d2136ae15482897e0674ff093d53e5738e1824a032258bd97a82f5dd978daa23617f6008abc169049c825afef7cd4502dd3f82168ac1546f1f1961edeaab1a4cc776a179ce1b0c603b93071d2ff5b777b52f6b014afa0353f23379f84952633c466c55f510af1d8dce7c25f05d4';
    var r = 'b2cef432183287599668db45c3a934edab6389d55f3ef7d1ea8c6c26055cc6b593018852e4014e41ba697f624d37c75d90725fb7074b765376f7bbc3465f70fc8ac06d4e76b6dbd1afa52f784c75fddfecf49ea4e4aab58535a9900eba4d963d7190b305f4af516aeec470914e50abd1823c1299be7cb7ddb8b25ae6c7f1ac91c1924f966a4788c9a3ea8ea2718f422fed84694e3d3b285ecf706353900756fbb04a1bccd361f0de86de4d102fd5f2f81b09aefc865a2c715fcd21f6ffe27eebab2fed2ed82b463b0cedf11736d190b58ef7b139b6b8f47f86e5a20451c3ef6b3168e8f0c6e23c274b07e8e9262aa236f9dfb06b303f72cb89ab58d1dea86020';
    const n = new BigInteger( "17641337798011144726545802911572386832238558454371890141515279418776389388639814400178399216174070298585431838786341778590088636152606323929338006222198515057154255585492463150835901760068461331932519110364120966259936510059602118988717350925818153956215105635680311124356002094065544950815943998079494638740859809686800286399775943004744752026195646959769923781578446436494356085393874254900960048802507267495325456128577494691056167201618484249078664373347848830538951690640502366916069947783581738713985664395477347900095679177345830256417126621529850192259660726496250664502695455326668542291500800163572513218881", 10).toString(16);
    var unblindedToken = tokengenerator.unblindToken(blindedSignedToken, r, '123', n);
    //expect(unblindedToken.toString(16)).to.equal("8130bacf1e1a8f65608e877a4d39f6040255dfff3826f7e75afdfeedee7846fa3eef06005bc70e45a8d9d41b724f8703493ab73a9755e3835beaa1b847c73f7bf178a2ac32b4bc08a257e83af60a60689d92afaac291a93a5b2a981902a730e8a0ebc4ddb6e6d36b3510189f3c625f8e153402c0ad873c94358bf72b0709537d62709eb994e458bd21f45ae4dd725b62ff31fefe521b4dcd6ec6b360b61ec3f378c047c072e784a1569ec9dc666e0437ae16186cce697608a614e634ca882246479852a611ae36f7065759dac70a9e4ac857adfacbb2b79f79b16de3127f70f871e2d4ff00122814eff2a4729f062b5b1e2ec5ac17db5d3079ddbc8b4766204");
    const result = BlindSignature.verify({
      unblinded: new BigInteger('77f94f2e3e3b227b1d80b64b9dcd889efa09819bd4b127d486aaa4e1331a1fce6768f8db4b54af9292772c86f2d1beb885d95d19dd735f402812c1f0f864d11ac34df259c689b08a13395949f2aeb55d72d15c1367f059f624a57e38d5d3cec3f3b1e26f1b15b10fa7bbb8fd91e2372c80aa2b17a82a0d9da32fb7639cf2af1841b9cc9a56b3f417e397209e124ba4603fef0d7319b3cef42743e6dfffb4fdfe9fabc3faaecb21f399331b7d38dd019b3cda6212b122ac2865f93acc5d671d87441c2c41bd1eac1575c0052c844a797aa3471d8e60302741902c875dce6dbdb11cc91bc0d100653576c27b5cb2176cc12821c8dc6a304f8e53b4a30f209d6b02', 16),
      N: new BigInteger( "17641337798011144726545802911572386832238558454371890141515279418776389388639814400178399216174070298585431838786341778590088636152606323929338006222198515057154255585492463150835901760068461331932519110364120966259936510059602118988717350925818153956215105635680311124356002094065544950815943998079494638740859809686800286399775943004744752026195646959769923781578446436494356085393874254900960048802507267495325456128577494691056167201618484249078664373347848830538951690640502366916069947783581738713985664395477347900095679177345830256417126621529850192259660726496250664502695455326668542291500800163572513218881", 10),
      E: new BigInteger("65537", 10),
      message: "dcfd22e3-f858-43bb-847a-0abaedfb649d"
    })

    expect(result).to.equal(true);
  }),
  it('works', function() {
    var blindedSignedToken =  '94b920e79ce9c297bfa0a82cdfc599749e4a4713d9036702e5c7dd56184381e393674eca98da2e57fb4cff07731004e4cb7f22c7948228ad497c4102d6b89f11954b882affd2fa1cf8f33bd88c59e89ca2c27c8b0f3a9b224f3e6e4105b1f7e86ee0a29a2778a5571dab780b5be22fd94d25b69f00bf689e78845928c2228138e6244a7d6793b0fa80afa9542a6ac806ee3f7358f99f0b2c6fae3b9289988e0e8e85fa3c891565adf64c5c8bfcb3c451c0ebb55038c003d1240f40fe1f320c9833fb4367f8b83694602a664b7c285426049221e49fde6c1b4a78dd8f4359657004de3af88616d69d834c6fa9f0d5c1d407e2cd066e44c69438eac310f0e9df79';
    var r = 'ce7cb577d0f15e0c15198a05d2985eb39dc66a8989ede8904d97a1007db42dfb2729189dd4089fdb7ac0849d45a6994a3079aa47e9b57b057dbb84ae1289294';
    var unblindedToken = tokengenerator.unblindToken(blindedSignedToken, r, 'foobar42');
    const result = BlindSignature.verify({
      unblinded: new BigInteger(unblindedToken, 16),
      N: PUBLIC_KEY_N,
      E: PUBLIC_KEY_E,
      message: "52870df1-e940-4739-b05f-cf40f7c443a1"
    })

    expect(result).to.equal(true);
  }),
  it('fails with a wrong password', function() {
    var blindedSignedToken =  '94b920e79ce9c297bfa0a82cdfc599749e4a4713d9036702e5c7dd56184381e393674eca98da2e57fb4cff07731004e4cb7f22c7948228ad497c4102d6b89f11954b882affd2fa1cf8f33bd88c59e89ca2c27c8b0f3a9b224f3e6e4105b1f7e86ee0a29a2778a5571dab780b5be22fd94d25b69f00bf689e78845928c2228138e6244a7d6793b0fa80afa9542a6ac806ee3f7358f99f0b2c6fae3b9289988e0e8e85fa3c891565adf64c5c8bfcb3c451c0ebb55038c003d1240f40fe1f320c9833fb4367f8b83694602a664b7c285426049221e49fde6c1b4a78dd8f4359657004de3af88616d69d834c6fa9f0d5c1d407e2cd066e44c69438eac310f0e9df79';
    var r = 'ce7cb577d0f15e0c15198a05d2985eb39dc66a8989ede8904d97a1007db42dfb2729189dd4089fdb7ac0849d45a6994a3079aa47e9b57b057dbb84ae1289294';
    var unblindedToken = tokengenerator.unblindToken(blindedSignedToken, r, 'foobar43');
    const result = BlindSignature.verify({
      unblinded: unblindedToken,
      N: PUBLIC_KEY_N,
      E: PUBLIC_KEY_E,
      message: "52870df1-e940-4739-b05f-cf40f7c443a1"
    })

    expect(result).to.equal(false);
  }),
  it('fails with a wrong message', function() {
    var blindedSignedToken =  '94b920e79ce9c297bfa0a82cdfc599749e4a4713d9036702e5c7dd56184381e393674eca98da2e57fb4cff07731004e4cb7f22c7948228ad497c4102d6b89f11954b882affd2fa1cf8f33bd88c59e89ca2c27c8b0f3a9b224f3e6e4105b1f7e86ee0a29a2778a5571dab780b5be22fd94d25b69f00bf689e78845928c2228138e6244a7d6793b0fa80afa9542a6ac806ee3f7358f99f0b2c6fae3b9289988e0e8e85fa3c891565adf64c5c8bfcb3c451c0ebb55038c003d1240f40fe1f320c9833fb4367f8b83694602a664b7c285426049221e49fde6c1b4a78dd8f4359657004de3af88616d69d834c6fa9f0d5c1d407e2cd066e44c69438eac310f0e9df79';
    var r = 'ce7cb577d0f15e0c15198a05d2985eb39dc66a8989ede8904d97a1007db42dfb2729189dd4089fdb7ac0849d45a6994a3079aa47e9b57b057dbb84ae1289294';
    var unblindedToken = tokengenerator.unblindToken(blindedSignedToken, r, 'foobar42');
    const result = BlindSignature.verify({
      unblinded: new BigInteger(unblindedToken, 16),
      N: PUBLIC_KEY_N,
      E: PUBLIC_KEY_E,
      message: "52870df1-e940-4739-b05f-cf40f7c443a2"
    })

    expect(result).to.equal(false);
  })
});

function messageToHashInt(message) {
  const messageHash = sha256(message);
  const messageBig = new BigInteger(messageHash, 16);
  return messageBig;
}

function unblind({ signed, key, r, N }) {

}
