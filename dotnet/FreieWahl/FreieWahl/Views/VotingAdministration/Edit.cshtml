@using FreieWahl.Controllers
@using Microsoft.Extensions.Localization
@model FreieWahl.Models.VotingAdministration.EditVotingModel

@inject IStringLocalizer<VotingAdministrationController> Localizer

@{
    ViewData["Title"] = "Edit";
}

<h2>Edit</h2>

<hr />
<div id="votingLoadProgress">
    <div class="progress">
        <div id="fw-load-progress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
    </div>
</div>
<div id="votingEditView" style="display: none">
    <div class="form-group">
        <input class="form-control" type="text" id="votingTitle" value="@Localizer["LabelVotingTitle"]">
        <label for="votingTitle">@Localizer["LabelVotingTitle"]</label>
    </div>
    <div class="form-group">
        <input class="form-control" type="text" id="votingDescription" value="@Localizer["LabelVotingDescription"]">
        <label for="votingDescription">@Localizer["LabelVotingDescription"]</label>
    </div>
    <button class="btn btn-primary" onclick="saveVoting()">
        <i class="material-icons align-top mr-3">save</i> Save
    </button>
    <button class="btn btn-warning" onclick="cancelEditing()">
        <i class="material-icons align-top mr-3">cancel</i> Cancel
    </button>
    <div style="float: none">
        <h3>@Localizer["QuestionsHeader"]</h3>
        <div id="votingQuestionsListContent"></div>
        <div id="addQuestion">
            <a class="btn btn-primary" href="EditQuestion?qid=0&id=@(Model.VotingId)"><i class="material-icons align-top mr-3">add</i> Add</a>
        </div>
    </div>
</div>

<div>
    <a asp-action="Overview">Back to Overview</a>
</div>

<script>
    firebase.auth().onAuthStateChanged(function (currentUser) { editVoting(currentUser); });

    function cancelEditing() {
        window.location.assign("Overview");
    }

    function editVoting(currentUser) {
         if (@Model.VotingId == 0)
         {
             $("#votingLoadProgress").hide("fast");
             $("#votingEditView").show("fast");
             return;
         }

         if (currentUser) {
             currentUser.getIdToken(true).then(function(idToken) {
             $.ajax({
                     url: 'GetVotingDetails',
                     data: { "id": @Model.VotingId },
                     type: 'GET',
                    datatype: 'json',
                     beforeSend: function(xhr) {
                         xhr.setRequestHeader("Authorization", idToken);
                     },
                     success: function(data) { showVotingDetails(data); }
                     // error: todo
                 });
             });
         }
    }

    function showVotingDetails(voting) {

        $("#votingTitle").attr('value', voting.title);
        $("#votingDescription").attr('value', voting.description);
        var items = [];
        for (var i = 0; i < voting.questions.length; i++) {
            var question = voting.questions[i];
            var item = '<div class="card"><div class="card-body">' +
                ' <p class="card-text">' +
                '  <i class="material-icons">check_circle</i>' +
                question.text +
                '</div>';
            item +=
                ' <a class="btn btn-primary text-light mr-5" href="EditQuestion?qid=' +
                question.id + '&id=@(Model.VotingId)"><i class="material-icons align-top mr-3">edit</i>Edit</a>';
            item += '<a class="btn btn-primary text-light" onclick="deleteQuestion(\''
                + question.id + '\')"><i class="material-icons align-top mr-3">delete</i>Delete</a></div>"';
            items.push(item);

        }

        $("#votingQuestionsListContent").empty();
        $("<div/>",
            {
                "class": "d-flex flex-column my-2",
                html: items.join("\n")
            }).appendTo("#votingQuestionsListContent");

        $("#votingLoadProgress").hide("fast");
        $("#votingEditView").show("fast");
    }

    function deleteQuestion(qid) {
        var currentUser = firebase.auth().currentUser;
        if (currentUser) {
            currentUser.getIdToken(true).then(function (idToken) {
                $.post({
                    url: 'DeleteVotingQuestion',
                    data: { "qid": qid, "id": @Model.VotingId },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function (data) { /* todo - refresh list */ }
                    // error: todo
                });
            });
        }
    }

    function saveVoting() {
        var title = $("#votingTitle").val();
        var desc = $("#votingDescription").val();
        var currentUser = firebase.auth().currentUser;
        if (currentUser) {
            currentUser.getIdToken(true).then(function (idToken) {
                $.post({
                    url: 'UpdateVoting',
                    data: { "title": title, "desc": desc, "id": @Model.VotingId },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function (data) { window.location.assign("Overview"); }
                    // error: todo
                });
            });
        }
    }
</script>

