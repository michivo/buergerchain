@using FreieWahl.Controllers
@using FreieWahl.Models.VotingAdministration
@using Microsoft.Extensions.Localization
@model FreieWahl.Models.VotingAdministration.VotingOverviewModel

@inject IStringLocalizer<VotingAdministrationController> Localizer

@{
    ViewData["Title"] = Model.Title;
}

<h2>@Localizer["Header"]</h2>

<div id="votingLoadProgress">
    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
</div>
<div id="votingOverviewList" style="display: none">    
    <div id="votingOverviewListContent"></div>
    <div id="addVoting">
        <button type="button" class="btn btn-primary" onclick="addVoting()"><i class="material-icons">add</i></button>
    </div>
</div>
<div id="votingEditView" style="display: none">
    <div class="form-group">
        <input class="form-control" type="text" id="votingTitle" value="@Localizer["LabelVotingTitle"]">
        <label for="votingTitle">@Localizer["LabelVotingTitle"]</label>
    </div>
    <div class="form-group">
        <input class="form-control" type="text" id="votingDescription" value="@Localizer["LabelVotingDescription"]">
        <label for="votingDescription">@Localizer["LabelVotingDescription"]</label>
    </div>
    <input type="hidden" value="" id="votingId">
    <button class="btn btn-primary" onclick="saveVoting()">
        <i class="material-icons align-top mr-3">save</i> Save
    </button>
    <button class="btn btn-warning" onclick="cancelEditing()"> 
        <i class="material-icons align-top mr-3">cancel</i> Cancel
    </button>
    <div style="float: none">
        <h3>@Localizer["QuestionsHeader"]</h3>
        <div id="votingQuestionsListContent"></div>
        <div id="addQuestion">
            <button class="btn btn-primary" onclick="addQuestion()"><i class="material-icons align-top mr-3">add</i> Add</button>
        </div>
    </div>
</div>

<script>
    firebase.auth().onAuthStateChanged(function (currentUser) { showOverview(currentUser); });


    function showOverview(currentUser) {
        $("#votingOverviewListContent").empty();
        $("#votingOverviewList").hide('fast');
        $("#votingEditView").hide('fast');
        $("#votingLoadProgress").show();
        if (currentUser) {
            currentUser.getIdToken(true).then(function (idToken) {
                $.ajax({
                    url: 'GetVotingsForUser',
                    type: 'GET',
                    datatype: 'json',
                    success: showOverviewData,
                    error: function(data) {
                        $("#votingLoadProgress").hide("fast");
                        $("#votingOverviewList").show('fast');
                        $("<div/>",
                            {
                                "class": "bc-error-message",
                                html: "An error occurred getting your votings: " + data
                            }).appendTo("#votingOverviewListContent");
                        componentHandler.upgradeDom();
                    },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    }
                });
            });
        }
    };

    function showOverviewData(data) {
        var items = [];
        for (var i = 0; i < data.length; i++) {
            var voting = data[i];
            var item = '<div class="card"><div class="card-body">';
            item += '  <h4 class="card-title">' + voting.title + '</h4>';
            item += '  <p class="card-text">' +
                voting.description +
                '</p>';
            item +=
                ' <a class="btn btn-primary text-light mr-5" onclick="editVoting(' +
                voting.id +
                ')"><i class="material-icons align-top mr-3">delete</i>Edit</a>';
            item += '<a class="btn btn-primary text-light" onclick="deleteVoting(' +
            voting.id +
                ')"><i class="material-icons align-top mr-3">delete</i>Delete</a></div ></div > ';
            items.push(item);
        }
        $("#votingLoadProgress").hide("fast");
        $("#votingOverviewList").show('fast');
        $("<div/>",
            {
                "class": "d-flex flex-column my-3",
                html: items.join("\n")
            }).appendTo("#votingOverviewListContent");
        componentHandler.upgradeDom();
    }

    function addVoting() {
        $("#votingOverviewList").hide('fast');
        $("#votingTitle").attr('value', '');
        $("#votingDescription").attr('value', '');
        $("#votingId").val('0');
        $("#votingEditView").show("fast");
    }

    function addQuestion() {
        alert("Not supported yet");
    }

    function cancelEditing() {
        var currentUser = firebase.auth().currentUser;
        showOverview(currentUser);
    }

    function editVoting(id) {
        $("#votingOverviewList").hide('fast');
        $('#votingLoadProgress').show();

        var currentUser = firebase.auth().currentUser;
        if (currentUser) {
            currentUser.getIdToken(true).then(function (idToken) {
                $.ajax({
                    url: 'GetVotingDetails',
                    data: { "id": id },
                    type: 'GET',
                    datatype: 'json',
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function (data) { showVotingDetails(data, id); }
                        // error: todo
                    });
            });
        }
    }

    function showVotingDetails(voting, id) {

        $("#votingTitle").attr('value', voting.title);
        $("#votingDescription").attr('value', voting.description);
        $("#votingId").val(id);
        var items = [];
        for (var i = 0; i < voting.questions.length; i++)
        {
            var question = voting.questions[i];
            var item = '<li class="mdl-list__item">' +
                ' <span class="mdl-list__item-primary-content">' +
                '  <i class="material-icons mdl-list__item-avatar">check_circle</i>' + question.text + '</span></li>';
            items.push(item);
        }

        $("#votingQuestionsListContent").empty();
        $("<ul/>",
            {
                "class": "freiewahl-voting-overview mdl-list",
                html: items.join("\n")
            }).appendTo("#votingQuestionsListContent");

        $("#votingLoadProgress").hide("fast");
        $("#votingEditView").show("fast");
    }

    function saveVoting() {
        var title = $("#votingTitle").val();
        var desc = $("#votingDescription").val();
        var id = $("#votingId").val();
        var currentUser = firebase.auth().currentUser;
        if (currentUser) {
            currentUser.getIdToken(true).then(function(idToken) {
                $.post({
                    url: 'UpdateVoting',
                    data: { "title": title, "desc": desc, "id": id },
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function (data) { showOverview(currentUser) }
                    // error: todo
                });
            });
        }
    }
</script>