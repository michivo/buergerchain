@using FreieWahl.Controllers
@using Microsoft.Extensions.Localization
@model FreieWahl.Models.VotingAdministration.EditVotingQuestionModel

@inject IStringLocalizer<VotingAdministrationController> Localizer

@{
    ViewData["Title"] = "Edit";
}

<h2>Edit</h2>

<hr />
<div id="votingLoadProgress">
    <div class="progress">
        <div id="fw-load-progress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 75%"></div>
    </div>
</div>
<div id="votingEditView" style="display: none">
    <div class="form-group">
        <input class="form-control" type="text" id="questionText" value="***Question Text">
        <label for="questionText">***Question Text</label>
    </div>
    <div class="form-group">
        <input class="form-control" type="text" id="questionDescription" value="***Additional Information">
        <label for="questionDescription">***Additional Information</label>
    </div>
    <button class="btn btn-primary" onclick="saveQuestion()">
        <i class="material-icons align-top mr-3">save</i> Save
    </button>
    <button class="btn btn-warning" onclick="cancelEditing()">
        <i class="material-icons align-top mr-3">cancel</i> Cancel
    </button>
</div>

<div>
    <a asp-action="Overview">Back to Overview</a>
</div>

<script>
    firebase.auth().onAuthStateChanged(function (currentUser) { editQuestion(currentUser); });

    function addQuestion() {
        alert("Not supported yet");
    }

    function cancelEditing() {
        window.location.assign("Overview");
    }

    function editQuestion(currentUser) {
        if (@Model.QuestionId == 0) {
            $("#votingLoadProgress").hide("fast");
            $("#votingEditView").show("fast");
            return;
        }

        if (currentUser) {
            currentUser.getIdToken(true).then(function(idToken) {
                $.ajax({
                    url: 'GetQuestion',
                    data: { "votingId": '@Model.VotingId', "questionId": '@Model.QuestionId' },
                    type: 'GET',
                    datatype: 'json',
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function(data) { showQuestionDetails(data); }
                    // error: todo
                });
            });
        }
    }

    function showQuestionDetails(question) {

        $("#questionText").attr('value', question.text);
        $("#questionDescription").attr('value', question.description);
        $("#votingLoadProgress").hide("fast");
        $("#votingEditView").show("fast");
    }

    function saveQuestion() {
        var text = $("#questionText").val();
        var desc = $("#questionDescription").val();
        var currentUser = firebase.auth().currentUser;
        if (currentUser) {
            currentUser.getIdToken(true).then(function (idToken) {
                $.post({
                    url: 'UpdateVotingQuestion',
                    data: { "title": text, "desc": desc, "id": '@Model.VotingId', "qid": '@Model.QuestionId' },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function (data) { window.location.assign("Edit?id='@Model.VotingId'"); }
                    // error: todo
                });
            });
        }
    }
</script>

