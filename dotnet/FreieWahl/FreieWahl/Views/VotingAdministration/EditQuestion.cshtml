@using FreieWahl.Controllers
@using Microsoft.Extensions.Localization
@model FreieWahl.Models.VotingAdministration.EditVotingQuestionModel

@inject IStringLocalizer<VotingAdministrationController> Localizer

@{
    ViewData["Title"] = "Edit";
}

<h2>Edit</h2>

<hr />
<div id="votingLoadProgress">
    <div class="progress">
        <div id="fw-load-progress" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
    </div>
</div>
<div id="votingEditView" style="display: none">
    <div class="form-group">
        <input class="form-control" type="text" id="questionText" value="***Question Text">
        <label for="questionText">***Question Text</label>
    </div>
    <div class="form-group">
        <input class="form-control" type="text" id="questionDescription" value="***Additional Information">
        <label for="questionDescription">***Additional Information</label>
    </div>
    <div>
        <h4>***Answer options</h4>
        <ul class="list-group" id="fw-answer-options">
            <li class="list-group-item" id="fw-opt-0"><input class="form-control" type="text" value="***Yes"><button class="btn btn-primary" onclick="deleteAnswer(0)"><i class="material-icons align-top ml-3">delete</i></button></li>
            <li class="list-group-item" id="fw-opt-1"><input class="form-control" type="text" value="***No"><button class="btn btn-primary" onclick="deleteAnswer(1)"><i class="material-icons align-top ml-3">delete</i></button></li>
        </ul>
        <button class="btn btn-primary"><i class="material-icons align-top" onclick="addAnswer('*** Answer Text')">add</i></button>
    </div>

    <button class="btn btn-primary" onclick="saveQuestion()">
        <i class="material-icons align-top mr-3">save</i>***Save
    </button>
    <button class="btn btn-warning" onclick="cancelEditing()">
        <i class="material-icons align-top mr-3">cancel</i>***Cancel
    </button>
</div>

<div>
    <a asp-action="Overview">Back to Overview</a>
</div>

<script>
    firebase.auth().onAuthStateChanged(function (currentUser) { editQuestion(currentUser); });

    function isEmpty(str) {
        return (!str || 0 === str.length || str == "0");
    }

    function cancelEditing() {
        window.location.assign("Edit?id=@(Model.VotingId)");
    }

    function editQuestion(currentUser) {
        if (isEmpty('@(Model.QuestionId)')) {
            $("#votingLoadProgress").hide("fast");
            $("#votingEditView").show("fast");
            return;
        }

        if (currentUser) {
            currentUser.getIdToken(true).then(function(idToken) {
                $.ajax({
                    url: 'GetQuestion',
                    data: { "votingId": '@Model.VotingId', "questionId": '@Model.QuestionId' },
                    type: 'GET',
                    datatype: 'json',
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function(data) { showQuestionDetails(data); }
                    // error: todo
                });
            });
        }
    }

    function showQuestionDetails(question) {

        $("#questionText").attr('value', question.text);
        $("#questionDescription").attr('value', question.description);
        if (question.answerOptions && question.answerOptions.length > 0) {
            $("#fw-answer-options").empty();
            for(var i = 0; i < question.answerOptions.length; i++) {
                addAnswer(question.answerOptions[i].text);
            }
        }

        $("#votingLoadProgress").hide("fast");
        $("#votingEditView").show("fast");
    }

    function saveQuestion() {
        var text = $("#questionText").val();
        var desc = $("#questionDescription").val();
        var currentUser = firebase.auth().currentUser;
        if (currentUser) {
            currentUser.getIdToken(true).then(function (idToken) {
                $.post({
                    url: 'UpdateVotingQuestion',
                    data: { "title": text, "desc": desc, "id": '@Model.VotingId', answers: getAnswers(), "qid": '@Model.QuestionId' },
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("Authorization", idToken);
                    },
                    success: function (data) { window.location.assign("Edit?id=@Model.VotingId"); }
                    // error: todo
                });
            });
        }
    }

    function getAnswers() {
        var result = [];
        $("#fw-answer-options li input").each(function(index) {
            result.push($(this).val());
        });
        return result;
    }

    function deleteAnswer(index) {
        $("#fw-answer-options li").eq(index).remove();
    }

    function addAnswer(text) {

        var count = $("#fw-answer-options").children().length;
        $("<li/>",
            {
                "class": "list-group-item",
                "id": 'fw-opt-' + count,
                html: '<input class="form-control" type="text" value="' + text + '"> <button class="btn btn-primary" onclick="deleteAnswer('
                    + count + ')"><i class="material-icons align-top ml-3">delete</i></button>'
            }).appendTo("#fw-answer-options");
    }
</script>

