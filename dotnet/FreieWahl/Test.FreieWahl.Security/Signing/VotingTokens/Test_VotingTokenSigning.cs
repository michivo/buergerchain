using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Security;

namespace Test.FreieWahl.Security.Signing.VotingTokens
{
    /// <summary>
    /// Summary description for Test_VotingTokenSigning
    /// </summary>
    [TestClass]
    public class Test_VotingTokenSigning
    {
        static string _key = @"-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAss70Mhgyh1mWaNtFw6k07atjidVfPvfR6oxsJgVcxrWTAYhS
5AFOQbppf2JNN8ddkHJftwdLdlN297vDRl9w/IrAbU52ttvRr6UveEx1/d/s9J6k
5Kq1hTWpkA66TZY9cZCzBfSvUWruxHCRTlCr0YI8Epm+fLfduLJa5sfxrJHBkk+W
akeIyaPqjqJxj0Iv7YRpTj07KF7PcGNTkAdW+7BKG8zTYfDeht5NEC/V8vgbCa78
hloscV/NIfb/4n7sAAnxbuRGNbliBkQitYm/LR5opdoLpGUE6jTxPBTXPe5DlXDM
YM7fv9oR18O/OLvPMsNUN/mZ/s/C37/C72qUtwIDAQABAoIBAAK7KH2vYu4wTxzQ
5JLlfbp3mLCdQrQqgtlLRcea41zhnxox49o5ruFQIJZigP1uHR68sHuSL/PhuHp2
MrhbctVYpTHGNgf6+YvuQPhcapzzE6J03d3kQZuEQ0/A+dV/iva2GBXqM9dRg84a
Tg3dK5Kqo5JBKOiswkU07DCEM0vIc42Lx3aK284ZolUoYlJbJZv/PqLzcZxd/PPm
VgePJTpAy3RrQN3YtdmshVg4qCrCtDfX7d4l73ENlE3XTVz36QSPHI62qp77wf7I
uIGoEnl7WGy94UddVxD/xW6SwJ0LfdIwVedf+BnQdknMM18oGwa7Rg0FhD5s+BmY
hdVfIZECgYEA9ErS8THariVpfvVaOgQ41SF371JksUWmzqSH8kGDnzVXdYCluV71
ON0g/bHoWh49j2ZRJELZynYku63ONcBkp8sfM4BD3hTj/T8/U5N8CqUh0jCJw0B7
iQWcQ0Fm4b4q8UlJOeDkbkXGG3G/poHtq+xi22r+ONRsP8UR1Xdf6O8CgYEAu2C4
fLsHPBczZ49habxGfIS7wUlQ2bnm+m5vutgPaKXcnQ4OeiVcZV96jljogNbOwTRV
/ZUiX67CAoNZVCp45TSgzVJPQBDha0nG2D5LDOCFLdYpqP/B/TZ54Uu0DJFh6s2F
aB7D9cCE+agg88uneT8jqQ+WCXXHX6rCiHoYwLkCgYEAyxliIrDGFD56ZNjq+I0G
CvvWUJv5pwA3XFmhxKD/IuAgJEqefW0bBvmhMgo1GKdHmu7/ytvhYdezVm17oWig
xnezKwgaZIqNucBZj8xwNhFv+uXrwu7bReHqNmgrdsa5wPyi6oG0qJFN0QdSxMYE
qQjQb4eWb/z7OlFHMGgczvUCgYBq/a454l0eLa03a8JWqp+gx/WhRyi4OZMu2dJI
YMhjm5ldwEH58s1QQPVsxE12C7Gg1i5njjlDYzj6UF+4VEwVrDhJJL+FuF3OciDt
JpyZ7LV+17OQAQGWgP2U7DIRnw3HEbUkH7UK5PPIzfyK2HV3INtO1Ex6eFrwQEO1
w+nQWQKBgQCuCzMFA2JKDPE5W6Kr11Po4GF+ucC0WZls18uC5+vTKKVHevTcazPY
AkU5y1zRY3ZY+8pOZqyWvp0zRzooG9ptzR+V+byPJSfyafeBoj0A7B3Gf/SqxVJF
XWpyUp0ln/id2ThI8JB5gQaIsqavGeaXKv0VvFO+LUVuS+Rm4b4LMw==
-----END RSA PRIVATE KEY-----";

        [TestMethod]
        public void TestMethod1()
        {
            var pemReader = new PemReader(new StringReader(_key));
            var key = (AsymmetricCipherKeyPair)pemReader.ReadObject();
            RsaKeyParameters publicParams = (RsaKeyParameters)key.Public;
            RsaPrivateCrtKeyParameters privateKey = (RsaPrivateCrtKeyParameters) key.Private;

            //signer.Init(true, key.Private);
            var blindedToken = new BigInteger("18723525667736902108591819178721903910974162378619273236776746160514343238649229277767099564706285137607463773936268240127117412882139646807885347354780835781410448544070334312661486209069501672798119859052219681102448717123550081942071113202757155659217575936793669188764885537973931337571818791632158821852502571003083841126697200183195645876104029773590731258214696973103769874580654240755821664701103288030039866308845885927254281632998773248711353168056693702484544395743281270192148323772934941710989974066304609298597270532332125889187094169044321103872313261180886297594796173504627490504413504053969701653784", 10);
            var signed2 = blindedToken.ModPow(privateKey.Exponent, publicParams.Modulus);
            var signed = signed2.ToString(10);
            Assert.AreEqual("17586732898347771426267998233041332420211669194534734227209852615081592788723710668731830590686322696264236545168083082812805200382709766736243006050250561860158348114061447483788377802759625707941883058652502960683241118362795474399607470151755587662680065943798523535165849829221387658945576022554743412866138664862166146148009167272001519757592402857396382494408126056366678266187600066793606155959402423499246793449744727450210715235335342741551422267287567025899371606830295695201626864502205363719381993610813732286625290734703027804732854625925612885877780120037507826030924865425892442794115607111174679653330", signed);

            var unblindedToken = new BigInteger("20852893120196112393306915167016503593069158611548478865121089737281705565328168090201872030048550576792655039274880595785629918849057149738970046668750373191530295643253239135676089034950349412710664686329583681180607742360929576260090471528860177119557709348657809122399609548439248790063231019641780356084056168329344953546989678722589909746738516879116466808090199132250346165139406296870087736193087976522444255777696553588941427822402440171682405773821884362236022278021920776709363047694872957516952456548421352691423926928499198670432372769853525431272554009132580350243147758791799263297341931337812272779471", 10);
            var origToken = "b27423de-a0e1-4075-bcf0-fc2191badf98";

            var publicKey = (RsaKeyParameters)key.Public;
            var digest = new SHA256Managed();

            var messageHash = new BigInteger(digest.ComputeHash(Encoding.UTF8.GetBytes(origToken)));
            var sigIntVerification = unblindedToken.ModPow(publicKey.Exponent, publicKey.Modulus);
            Assert.AreEqual(messageHash, sigIntVerification);
        }
    }
}





